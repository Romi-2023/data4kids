# Data4Kids ‚Äî Streamlit MVP (rozszerzone)
# (misje, daily quest, symulacje, czyszczenie, fabu≈Ça,
#  album naklejek, quiz obrazkowy, + NOWE: przedmioty szkolne)
# -------------------------------------------------------------------------------------------------
# Windows (PowerShell):
#   python -m venv .venv
#   .\.venv\Scripts\Activate.ps1
#   python -m pip install --upgrade pip
#   pip install -r requirements.txt
#   streamlit run app.py
# -------------------------------------------------------------------------------------------------

import json
import hashlib
from datetime import datetime, date
from dateutil import tz
import random
from typing import Optional, List, Dict

import pandas as pd
import altair as alt
import streamlit as st

APP_NAME = "Data4Kids"
VERSION = "0.8.0"

# ---------------------------------
# Utilities & basic security (MVP)
# ---------------------------------

def hash_text(text: str) -> str:
    return hashlib.sha256(text.encode("utf-8")).hexdigest()

# Parent PIN (non-persistent MVP)
PARENT_PIN_HASH = hash_text("1234")
if "pin_hash" not in st.session_state:
    st.session_state.pin_hash = PARENT_PIN_HASH

# Age groups & levels
AGE_GROUPS = {"7-9": (7, 9), "10-12": (10, 12), "13-14": (13, 14)}
LEVEL_THRESHOLDS = [0, 30, 60, 100]  # L1:0+, L2:30+, L3:60+, L4:100+


def age_to_group(age: Optional[int]) -> str:
    if age is None:
        return "10-12"
    for label, (lo, hi) in AGE_GROUPS.items():
        if lo <= age <= hi:
            return label
    return "10-12"


def current_level(xp: int) -> int:
    if xp >= 100:
        return 4
    if xp >= 60:
        return 3
    if xp >= 30:
        return 2
    return 1

# -----------------------------
# Demo datasets (vary by age)
# -----------------------------
FAV_FRUITS = ["jab≈Çko", "banan", "truskawka", "winogrono", "arbuz"]
FAV_ANIMALS = ["kot", "pies", "zebra", "s≈Ço≈Ñ", "lama", "delfin"]
COLORS = ["czerwony", "zielony", "niebieski", "≈º√≥≈Çty", "fioletowy"]
CITIES = ["Warszawa", "Krak√≥w", "Gda≈Ñsk", "Wroc≈Çaw"]

@st.cache_data(show_spinner=False)
def make_dataset(n: int, cols: List[str], seed: int = 42) -> pd.DataFrame:
    random.seed(seed)
    data = {}
    if "wiek" in cols:
        data["wiek"] = [random.randint(7, 14) for _ in range(n)]
    if "wzrost_cm" in cols:
        data["wzrost_cm"] = [round(random.gauss(140, 12), 1) for _ in range(n)]
    if "ulubiony_owoc" in cols:
        data["ulubiony_owoc"] = [random.choice(FAV_FRUITS) for _ in range(n)]
    if "ulubione_zwierze" in cols:
        data["ulubione_zwierze"] = [random.choice(FAV_ANIMALS) for _ in range(n)]
    if "ulubiony_kolor" in cols:
        data["ulubiony_kolor"] = [random.choice(COLORS) for _ in range(n)]
    if "wynik_matematyka" in cols:
        data["wynik_matematyka"] = [max(0, min(100, int(random.gauss(70, 15)))) for _ in range(n)]
    if "wynik_plastyka" in cols:
        data["wynik_plastyka"] = [max(0, min(100, int(random.gauss(75, 12)))) for _ in range(n)]
    if "miasto" in cols:
        data["miasto"] = [random.choice(CITIES) for _ in range(n)]
    return pd.DataFrame(data)

# Presets per age group (simpler ‚Üí fewer columns)
DATASETS_PRESETS: Dict[str, Dict[str, List[str]]] = {
    "7-9": {
        "≈Åatwy (ma≈Çy)": ["wiek", "ulubiony_owoc", "miasto"],
        "≈Åatwy+ (z kolorem)": ["wiek", "ulubiony_owoc", "ulubiony_kolor", "miasto"],
    },
    "10-12": {
        "≈öredni": ["wiek", "wzrost_cm", "ulubiony_owoc", "miasto"],
        "≈öredni+": ["wiek", "wzrost_cm", "ulubiony_owoc", "ulubione_zwierze", "miasto"],
    },
    "13-14": {
        "Zaawansowany": ["wiek", "wzrost_cm", "wynik_matematyka", "wynik_plastyka", "miasto", "ulubiony_owoc"],
        "Zaawansowany+": ["wiek", "wzrost_cm", "wynik_matematyka", "wynik_plastyka", "miasto", "ulubiony_owoc", "ulubione_zwierze"],
    },
}

# -----------------------------
# UI style
# -----------------------------
KID_EMOJI = "üßíüéàüìä"
PARENT_EMOJI = "üîíüë®‚Äçüë©‚Äçüëß"

st.set_page_config(
    page_title=f"{APP_NAME} ‚Äî MVP",
    page_icon="üìö",
    layout="wide",
    menu_items={"About": f"{APP_NAME} v{VERSION} ‚Äî MVP"},
)

st.markdown(
    """
    <style>
      .big-title {font-size: 2.2rem; font-weight: 800;}
      .muted {color: #6b7280;}
      .pill {display:inline-block;padding:.15rem .55rem;border-radius:9999px;background:#EEF2FF;font-size:.8rem;margin-left:.3rem}
      .kid {background:#DCFCE7}
      .parent {background:#FEF9C3}
      .badge {display:inline-block;margin:.25rem;padding:.25rem .5rem;border-radius:.8rem;background:#F0F9FF;border:1px solid #bae6fd}
      .sticker {display:flex;align-items:center;gap:.5rem;padding:.6rem;border-radius:.8rem;border:1px dashed #cbd5e1;margin:.3rem 0}
      .locked {opacity:.35;filter:grayscale(100%)}
    </style>
    """,
    unsafe_allow_html=True,
)

# -----------------------------
# Stickers catalog (rozszerzone)
# -----------------------------
STICKERS: Dict[str, Dict[str, str]] = {
    "sticker_bars": {"emoji": "üìä", "label": "Mistrz S≈Çupk√≥w", "desc": "Poprawny wykres s≈Çupkowy."},
    "sticker_points": {"emoji": "üîµ", "label": "Mistrz Punkt√≥w", "desc": "Poprawny wykres punktowy."},
    "sticker_detect": {"emoji": "üçâ", "label": "Arbuzowy Tropiciel", "desc": "Zadanie detektywistyczne z arbuzem."},
    "sticker_sim": {"emoji": "üé≤", "label": "Badacz Symulacji", "desc": "Symulacja rzutu monetƒÖ."},
    "sticker_clean": {"emoji": "ü©∫", "label": "Doktor Danych", "desc": "Naprawianie liter√≥wek."},
    "sticker_story": {"emoji": "üìñ", "label": "Opowie≈õciopisarz", "desc": "Fabu≈Ça piknikowa."},
    "sticker_hawkeye": {"emoji": "üëÅÔ∏è", "label": "Oko Soko≈Ça", "desc": "Quiz obrazkowy ‚Äî spostrzegawczo≈õƒá."},
    # nowe ‚Äî przedmioty
    "sticker_math": {"emoji": "‚ûó", "label": "Mat-fun", "desc": "Zadanie z matematyki wykonane!"},
    "sticker_polish": {"emoji": "üìù", "label": "Jƒôzykowa Iskra", "desc": "Polski ‚Äî czƒô≈õci mowy/ortografia."},
    "sticker_history": {"emoji": "üè∫", "label": "Kronikarz", "desc": "Historia ‚Äî o≈õ czasu."},
    "sticker_geo": {"emoji": "üó∫Ô∏è", "label": "Ma≈Çy Geograf", "desc": "Geografia ‚Äî stolice i kontynenty."},
    "sticker_physics": {"emoji": "‚öôÔ∏è", "label": "Fiz-Mistrz", "desc": "Fizyka ‚Äî prƒôdko≈õƒá = s/t."},
    "sticker_chem": {"emoji": "üß™", "label": "Chemik Amator", "desc": "Chemia ‚Äî masa molowa."},
    "sticker_english": {"emoji": "üá¨üáß", "label": "Word Wizard", "desc": "Angielski ‚Äî s≈Ç√≥wka/irregulars."},
    "sticker_bio": {"emoji": "üß¨", "label": "Ma≈Çy Biolog", "desc": "Biologia ‚Äî podstawy kom√≥rki i ≈Ça≈Ñcucha pokarmowego."},

}

# -----------------------------
# Session state
# -----------------------------
if "parent_unlocked" not in st.session_state:
    st.session_state.parent_unlocked = False
if "kid_name" not in st.session_state:
    st.session_state.kid_name = ""
if "age" not in st.session_state:
    st.session_state.age = None
if "age_group" not in st.session_state:
    st.session_state.age_group = "10-12"
if "dataset_name" not in st.session_state:
    st.session_state.dataset_name = None
if "data" not in st.session_state:
    st.session_state.data = make_dataset(140, DATASETS_PRESETS["10-12"]["≈öredni"], seed=42)
if "activity_log" not in st.session_state:
    st.session_state.activity_log = []
if "xp" not in st.session_state:
    st.session_state.xp = 0
if "badges" not in st.session_state:
    st.session_state.badges = set()
if "stickers" not in st.session_state:
    st.session_state.stickers = set()
if "missions_state" not in st.session_state:
    st.session_state.missions_state = {}
if "hall_of_fame" not in st.session_state:
    st.session_state.hall_of_fame = []
# Daily quest state
if "last_quest" not in st.session_state:
    st.session_state.last_quest = None
if "todays" not in st.session_state:
    st.session_state.todays = None
if "kids_mode" not in st.session_state:
    st.session_state.kids_mode = True

def log_event(event: str):
    stamp = datetime.now(tz=tz.gettz("Europe/Warsaw")).strftime("%Y-%m-%d %H:%M:%S")
    st.session_state.activity_log.append({"time": stamp, "event": event})

# -----------------------------
# Glossary
# -----------------------------
GLOSSARY = {
    "≈õrednia": "Suma wszystkich warto≈õci podzielona przez ich liczbƒô.",
    "mediana": "Warto≈õƒá ≈õrodkowa po u≈Ço≈ºeniu danych od najmniejszej do najwiƒôkszej.",
    "korelacja": "Miara tego, jak dwie rzeczy zmieniajƒÖ siƒô razem (dodatnia, ujemna, brak).",
    "agregacja": "≈ÅƒÖczenie danych (np. liczenie ≈õredniej) w grupach.",
    "kategoria": "S≈Çowo/etykieta zamiast liczby (np. kolor, miasto).",
}

# Specjalna etykieta przyjazna dzieciom dla count()
COUNT_LABEL = "liczba os√≥b"

def _is_count_choice(val: str) -> bool:
    return val in ("count()", COUNT_LABEL)

# -----------------------------
# Global helpers (do u≈ºycia w r√≥≈ºnych stronach)
# -----------------------------

def award(ok: bool, xp_gain: int, badge: Optional[str] = None, mid: str = ""):
    if ok:
        prev_done = st.session_state.missions_state.get(mid, {}).get("done", False)
        if not prev_done:
            st.session_state.xp += xp_gain
            if badge:
                st.session_state.badges.add(badge)
        st.session_state.missions_state[mid] = {"done": True}
    else:
        st.session_state.missions_state[mid] = {"done": False}

def grant_sticker(code: str):
    if code in STICKERS:
        st.session_state.stickers.add(code)

def show_hint(mid: str, hint: str):
    key = f"hint_used_{mid}"
    if st.button("Podpowied≈∫ ü™Ñ (-1 XP)", key=f"hintbtn_{mid}"):
        if not st.session_state.get(key, False):
            st.session_state.xp = max(0, st.session_state.xp - 1)
            st.session_state[key] = True
        st.caption(hint)

# -----------------------------
# Chemistry constants + parser
# -----------------------------
ATOMIC_MASS = {"H": 1.008, "C": 12.011, "O": 15.999, "N": 14.007, "Na": 22.990, "Cl": 35.45}

def _molar_mass(formula: str) -> Optional[float]:
    # prosty parser: obs≈Çuga H2O, CO2, NaCl, C6H12O6 itp. (bez nawias√≥w)
    import re
    tokens = re.findall(r"[A-Z][a-z]?\d*", formula)
    if not tokens:
        return None
    total = 0.0
    for tok in tokens:
        m = re.match(r"([A-Z][a-z]?)(\d*)", tok)
        if not m:
            return None
        el, num = m.group(1), m.group(2)
        if el not in ATOMIC_MASS:
            return None
        n = int(num) if num else 1
        total += ATOMIC_MASS[el] * n
    return total

# -----------------------------
# Missions (global definitions)
# -----------------------------
def mission_draw_xy(mid: str, req_x: str, req_y: str, req_type: str) -> None:
    display_req_y = COUNT_LABEL if _is_count_choice(req_y) else req_y
    st.write(f"**Zadanie:** Narysuj wykres: **{req_type}** z osiƒÖ **X={req_x}**, **Y={display_req_y}**.")
    df = st.session_state.data

    x = st.selectbox("O≈õ X", df.columns.tolist(), key=f"{mid}_x")
    y_options = [COUNT_LABEL] + df.columns.tolist()
    y = st.selectbox("O≈õ Y", y_options, key=f"{mid}_y")
    chart_type = st.selectbox("Typ wykresu", ["punktowy", "s≈Çupkowy"], key=f"{mid}_type")

    try:
        if chart_type == "punktowy":
            if _is_count_choice(y):
                st.warning("Dla wykresu punktowego wybierz kolumnƒô liczbowƒÖ na osi Y (nie 'liczba os√≥b').")
                ch = alt.Chart(df).mark_circle(size=70, opacity=0.7).encode(x=x, y=x, tooltip=[x])
            else:
                ch = alt.Chart(df).mark_circle(size=70, opacity=0.7).encode(x=x, y=y, tooltip=[x, y])
        else:  # s≈Çupkowy
            if _is_count_choice(y):
                ch = alt.Chart(df).mark_bar().encode(x=x, y=alt.Y("count():Q", title="Liczba os√≥b"), tooltip=[x])
            else:
                ch = alt.Chart(df).mark_bar().encode(x=x, y=y, tooltip=[x, y])
        st.altair_chart(ch.interactive(), use_container_width=True)
    except Exception as e:
        st.warning(f"Nie uda≈Ço siƒô narysowaƒá: {e}")

    y_ok = (_is_count_choice(y) and _is_count_choice(req_y)) or (y == req_y)
    ok = (x == req_x) and y_ok and (chart_type == req_type)

    if st.button(f"Sprawd≈∫ {mid}"):
        award(ok, 10, badge="Rysownik danych", mid=mid)
        if ok:
            grant_sticker("sticker_bars" if chart_type == "s≈Çupkowy" else "sticker_points")
            st.success("‚úÖ Super ‚Äî dok≈Çadnie taki wykres!")
        else:
            st.warning(f"Jeszcze nie. Ustaw X={req_x}, Y={display_req_y}, typ={req_type}.")
    show_hint(mid, "S≈Çupki liczƒÖ **liczbƒô os√≥b**, a punkty wymagajƒÖ liczb na osi Y.")

def mission_detect_city(mid: str) -> None:
    st.write("**Zadanie detektywistyczne:** Znajd≈∫ **miasto**, w kt√≥rym jest **co najmniej 5 os√≥b** i ich **ulubiony owoc to 'arbuz'**.")

    df = st.session_state.data

    required = {"miasto", "ulubiony_owoc"}
    if not required.issubset(set(df.columns)):
        st.error("Potrzebne kolumny: 'miasto', 'ulubiony_owoc'.")
        return

    # Normalizacja + filtr na arbuz (case-insensitive)
    norm = df.copy()
    norm["miasto"] = norm["miasto"].astype(str).str.strip()
    norm["ulubiony_owoc"] = norm["ulubiony_owoc"].astype(str).str.strip().str.lower()
    df_arbuz = norm[norm["ulubiony_owoc"] == "arbuz"]

    grp = (
        df_arbuz
        .groupby("miasto", as_index=False)
        .size()
        .rename(columns={"size": "liczba_os√≥b"})
        .sort_values("liczba_os√≥b", ascending=False)
    )

    st.write("Zobacz warto≈õci w tabeli lub narysuj s≈Çupki: X=miasto, Y=liczba os√≥b (arbuz).")

    if grp.empty:
        st.info("Brak danych o fanach arbuza üçâ.")
        return

    st.dataframe(grp, use_container_width=True)
    st.bar_chart(grp.set_index("miasto")["liczba_os√≥b"])

    city_pick = st.selectbox("Twoje miasto:", grp["miasto"].tolist(), key=f"{mid}_city")

    if st.button(f"Sprawd≈∫ {mid}", key=f"{mid}_check"):
        liczba = int(grp.loc[grp["miasto"] == city_pick, "liczba_os√≥b"].iloc[0]) if city_pick in grp["miasto"].values else 0
        ok = liczba >= 5
        award(ok, 15, badge="Sherlock danych", mid=mid)
        if ok:
            grant_sticker("sticker_detect")
            st.success("‚úÖ Brawo! To miasto spe≈Çnia warunek (‚â• 5 os√≥b z arbuzem).")
        else:
            st.warning(f"W {city_pick} jest tylko {liczba} fan√≥w arbuza. Poszukaj miasta z wynikiem ‚â• 5.")

        show_hint(mid, "Przefiltruj na 'arbuz', zgrupuj po mie≈õcie, policz i wybierz miasto z wynikiem ‚â• 5.")

def mission_fill_blank_text(mid: str, sentence_tpl: str, correct_word: str, options: List[str], xp_gain: int = 6) -> None:
    st.write("**Uzupe≈Çnij zdanie:**")
    st.write(sentence_tpl.replace("___", "**___**"))
    pick = st.selectbox("Wybierz s≈Çowo:", options, key=f"{mid}_pick")

    if st.button(f"Sprawd≈∫ {mid}"):
        ok = pick == correct_word
        award(ok, xp_gain, badge="Mistrz s≈Ç√≥wek", mid=mid)
        if ok:
            st.success("‚úÖ Dobrze!")
        else:
            st.warning(f"Jeszcze nie. Poprawna odpowied≈∫: **{correct_word}**")

    show_hint(mid, "Na osi Y w s≈Çupkach czƒôsto jest **liczba os√≥b**.")

def mission_fill_number(mid: str, prompt: str, true_value: float, tolerance: Optional[float] = None, xp_gain: int = 8) -> None:
    st.write(f"**Uzupe≈Çnij liczbƒô:** {prompt}")
    step = 0.1 if isinstance(true_value, float) and not float(true_value).is_integer() else 1
    guess = st.number_input("Twoja odpowied≈∫:", step=step, key=f"{mid}_num")

    if st.button(f"Sprawd≈∫ {mid}"):
        ok = (abs(guess - true_value) <= tolerance) if tolerance is not None else (guess == true_value)
        award(ok, xp_gain, badge="Liczyd≈Ço", mid=mid)
        if ok:
            st.success(f"‚úÖ Tak! Prawid≈Çowo: {true_value:g}.")
        else:
            st.warning(f"Prawid≈Çowo: {true_value:g}.")

    show_hint(mid, "Policz ≈õredniƒÖ: dodaj wszystkie i podziel przez liczbƒô os√≥b.")

def mission_order_steps(mid: str, prompt: str, steps_correct: List[str], xp_gain: int = 10) -> None:
    st.write(f"**U≈Ç√≥≈º w kolejno≈õci:** {prompt}")
    picked = st.multiselect("Klikaj kroki we w≈Ça≈õciwej kolejno≈õci ‚¨áÔ∏è", steps_correct, default=[], key=f"{mid}_order")
    st.caption("Tip: klikaj po kolei; lista u g√≥ry zachowuje kolejno≈õƒá wyboru.")

    if st.button(f"Sprawd≈∫ {mid}"):
        ok = picked == steps_correct
        award(ok, xp_gain, badge="PorzƒÖdny planista", mid=mid)
        if ok:
            st.success("‚úÖ Idealnie u≈Ço≈ºone!")
        else:
            st.warning("Jeszcze nie. Zacznij od **Wczytaj dane** i sko≈Ñcz na **Zapisz wynik**.")

    show_hint(mid, "Najpierw **wczytaj**, potem **wybierz kolumny**, potem **wykres**.")

def mission_spot_the_error(mid: str, df_local: pd.DataFrame, xp_gain: int = 12) -> None:
    st.write("**Znajd≈∫ b≈ÇƒÖd na wykresie:**")
    if all(c in df_local.columns for c in ["ulubiony_owoc", "wiek"]):
        bad = alt.Chart(df_local).mark_bar().encode(x="ulubiony_owoc:N", y="wiek:Q", tooltip=["ulubiony_owoc", "wiek"])
        st.altair_chart(bad, use_container_width=True)
        q = "Co jest nie tak?"
        opts = [
            "Na osi Y powinna byƒá 'liczba os√≥b', nie 'wiek'.",
            "Na osi X powinna byƒá liczba, nie kategoria.",
            "Kolory sƒÖ z≈Çe.",
        ]
        pick = st.radio(q, opts, index=None, key=f"{mid}_err")
        if st.button(f"Sprawd≈∫ {mid}"):
            ok = pick == opts[0]
            award(ok, xp_gain, badge="Detektyw wykres√≥w", mid=mid)
            if ok:
                st.success("‚úÖ Dok≈Çadnie!")
            else:
                st.warning("Spr√≥buj jeszcze raz; pomy≈õl o tym, co liczƒÖ s≈Çupki.")
    else:
        st.info("Za≈Çaduj zestaw z kolumnami 'ulubiony_owoc' i 'wiek'.")

    show_hint(mid, "S≈Çupki zwykle liczƒÖ, ile element√≥w jest w ka≈ºdej kategorii.")

def mission_simulate_coin(mid: str) -> None:
    st.write("**Symulacja rzutu monetƒÖ üé≤** ‚Äî wybierz liczbƒô rzut√≥w, zgadnij udzia≈Ç or≈Ç√≥w, potem sprawd≈∫!")
    n = st.selectbox("Liczba rzut√≥w:", [10, 100, 1000], index=1, key=f"{mid}_n")
    guess = st.slider("Twoja zgadywana proporcja or≈Ç√≥w", 0.0, 1.0, 0.5, 0.01, key=f"{mid}_g")
    tol = 0.10 if n == 10 else (0.05 if n == 100 else 0.03)

    if st.button(f"Symuluj {mid}"):
        flips = [random.choice(["orze≈Ç", "reszka"]) for _ in range(n)]
        heads = flips.count("orze≈Ç")
        prop = heads / n
        st.write(f"Wynik: or≈Çy = {heads}/{n} (‚âà {prop:.2f})")
        df_sim = pd.DataFrame({"wynik": flips})
        chart = alt.Chart(df_sim).mark_bar().encode(x="wynik:N", y=alt.Y("count():Q", title="Liczba"))
        st.altair_chart(chart, use_container_width=True)
        ok = abs(prop - guess) <= tol
        award(ok, 10, badge="Ma≈Çy probabilista", mid=mid)
        if ok:
            grant_sticker("sticker_sim")
            st.success("‚úÖ ≈öwietna estymacja!")
        else:
            st.info("Nie szkodzi! Im wiƒôcej rzut√≥w, tym bli≈ºej 0.5.")

    show_hint(mid, "Przy du≈ºej liczbie rzut√≥w wynik zbli≈ºa siƒô do 50% or≈Ç√≥w.")

def mission_math_arith(mid: str):
    st.subheader("Matematyka ‚ûó: szybkie dzia≈Çania")
    a, b = random.randint(2, 12), random.randint(2, 12)
    op = random.choice(["+", "-", "*"])
    true = a + b if op == "+" else (a - b if op == "-" else a * b)
    guess = st.number_input(f"Policz: {a} {op} {b} = ?", step=1, key=f"{mid}_g")
    if st.button(f"Sprawd≈∫ {mid}"):
        ok = (guess == true)
        award(ok, 6, badge="Szybkie liczby", mid=mid)
        if ok:
            grant_sticker("sticker_math")
            st.success("‚úÖ Tak!")
        else:
            st.warning(f"Prawid≈Çowo: {true}")
    show_hint(mid, "Pamiƒôtaj: najpierw mno≈ºenie, potem dodawanie/odejmowanie.")

def mission_math_line(mid: str):
    st.subheader("Matematyka üìà: prosta y = a¬∑x + b")
    a = random.choice([-2, -1, 1, 2])
    b = random.randint(-3, 3)
    xs = list(range(-5, 6))
    df_line = pd.DataFrame({"x": xs, "y": [a*x + b for x in xs]})
    chart = alt.Chart(df_line).mark_line(point=True).encode(x="x:Q", y="y:Q")
    st.altair_chart(chart, use_container_width=True)
    q = st.radio("Jaki jest znak nachylenia a?", ["dodatni", "zerowy", "ujemny"], index=None, key=f"{mid}_slope")
    if st.button(f"Sprawd≈∫ {mid}"):
        sign = "zerowy" if a == 0 else ("dodatni" if a > 0 else "ujemny")
        ok = (q == sign)
        award(ok, 8, badge="Linia prosta", mid=mid)
        if ok:
            grant_sticker("sticker_math")
            st.success("‚úÖ Dobrze!")
        else:
            st.warning("Podpowied≈∫: linia ro≈õnie ‚Üí dodatni; maleje ‚Üí ujemny.")

def mission_polish_pos(mid: str):
    st.subheader("Jƒôzyk polski üìù: czƒô≈õƒá mowy")
    sentence = "Ala ma kota i czerwony balon."
    st.write(f"Zdanie: _{sentence}_")
    pick = st.selectbox("Kt√≥re s≈Çowo to rzeczownik?", ["Ala", "ma", "kota", "czerwony", "balon"], key=f"{mid}_pick")
    if st.button(f"Sprawd≈∫ {mid}"):
        ok = pick in {"Ala", "kota", "balon"}
        award(ok, 7, badge="Jƒôzykowa Iskra", mid=mid)
        if ok:
            grant_sticker("sticker_polish")
            st.success("‚úÖ ≈öwietnie!")
        else:
            st.warning("Rzeczowniki to nazwy os√≥b, rzeczy, zwierzƒÖt‚Ä¶")

def mission_history_timeline(mid: str):
    st.subheader("Historia üè∫: u≈Ç√≥≈º o≈õ czasu")
    events = [
        ("Chrzest Polski", 966),
        ("Bitwa pod Grunwaldem", 1410),
        ("Konstytucja 3 Maja", 1791),
        ("Odzyskanie niepodleg≈Ço≈õci", 1918),
    ]
    labels = [e[0] for e in events]
    order = st.multiselect("Klikaj w kolejno≈õci od najstarszego do najm≈Çodszego", labels, key=f"{mid}_ord")
    if st.button(f"Sprawd≈∫ {mid}"):
        correct = [e[0] for e in sorted(events, key=lambda x: x[1])]
        ok = (order == correct)
        award(ok, 9, badge="Kronikarz", mid=mid)
        if ok:
            grant_sticker("sticker_history")
            st.success("‚úÖ Piƒôknie u≈Ço≈ºone!")
        else:
            st.warning("Podpowied≈∫: 966 ‚Üí 1410 ‚Üí 1791 ‚Üí 1918")

def mission_geo_capitals(mid: str):
    st.subheader("Geografia üó∫Ô∏è: stolice")
    pairs = {
        "Polska": "Warszawa",
        "Niemcy": "Berlin",
        "Francja": "Pary≈º",
        "Hiszpania": "Madryt",
    }

    # ‚Äî‚Äî utrwal losowanie na czas rozwiƒÖzywania zadania ‚Äî‚Äî
    state_key = f"{mid}_country"
    if state_key not in st.session_state:
        st.session_state[state_key] = random.choice(list(pairs.keys()))
    country = st.session_state[state_key]

    # opcjonalny przycisk: losuj kolejne pytanie
    if st.button("Wylosuj inne pa≈Ñstwo", key=f"{mid}_new"):
        st.session_state[state_key] = random.choice(list(pairs.keys()))
        st.rerun()

    pick = st.selectbox(
        f"Stolica kraju: {country}",
        ["Warszawa", "Berlin", "Pary≈º", "Madryt"],
        key=f"{mid}_pick",
    )

    if st.button(f"Sprawd≈∫ {mid}"):
        ok = (pick == pairs[country])
        award(ok, 7, badge="Ma≈Çy Geograf", mid=mid)
        if ok:
            grant_sticker("sticker_geo")
            st.success("‚úÖ Super!")
        else:
            st.warning(f"Prawid≈Çowo: {pairs[country]}")


def mission_physics_speed(mid: str):
    st.subheader("Fizyka ‚öôÔ∏è: prƒôdko≈õƒá = droga / czas")
    s = random.choice([100, 150, 200, 240])  # metry
    t = random.choice([5, 8, 10, 12])        # sekundy
    guess = st.number_input(f"Oblicz prƒôdko≈õƒá dla s={s} m, t={t} s (m/s)", step=1.0, key=f"{mid}_v")
    true = s / t
    if st.button(f"Sprawd≈∫ {mid}"):
        ok = abs(guess - true) <= 0.1
        award(ok, 8, badge="Fiz-Mistrz", mid=mid)
        if ok:
            grant_sticker("sticker_physics")
            st.success("‚úÖ Git!")
        else:
            st.warning(f"Prawid≈Çowo ‚âà {true:.2f} m/s")
    show_hint(mid, "Wz√≥r: v = s / t. Uwa≈ºaj na jednostki!")

def mission_chem_molar(mid: str):
    st.subheader("Chemia üß™: masa molowa")
    choices = ["H2O", "CO2", "NaCl", "C6H12O6"]
    pick = st.selectbox("Wybierz wz√≥r:", choices, key=f"{mid}_f")
    guess = st.number_input("Podaj masƒô molowƒÖ (g/mol)", step=0.1, key=f"{mid}_m")
    if st.button(f"Sprawd≈∫ {mid}"):
        mm = _molar_mass(pick)
        if mm is None:
            st.warning("Nieobs≈Çugiwany wz√≥r.")
            return
        ok = abs(guess - mm) <= 1.0
        award(ok, 10, badge="Chemik Amator", mid=mid)
        if ok:
            grant_sticker("sticker_chem")
            st.success("‚úÖ Dobrze!")
        else:
            st.warning(f"Wynik ‚âà {mm:.2f} g/mol")
    show_hint(mid, "Zsumuj masy atomowe pierwiastk√≥w pomno≈ºone przez indeksy.")

def mission_english_irregular(mid: str):
    st.subheader("Angielski üá¨üáß: irregular verbs")
    verbs = {"go": "went", "see": "saw", "eat": "ate", "have": "had", "make": "made"}
    base = random.choice(list(verbs.keys()))
    pick = st.selectbox(f"Past Simple od '{base}' to‚Ä¶", sorted(set(verbs.values()) | {"goed", "seed"}), key=f"{mid}_v")
    if st.button(f"Sprawd≈∫ {mid}"):
        ok = (pick == verbs[base])
        award(ok, 7, badge="Word Wizard", mid=mid)
        if ok:
            grant_sticker("sticker_english")
            st.success("‚úÖ Nice!")
        else:
            st.warning(f"Prawid≈Çowo: {verbs[base]}")

def mission_bio_mito(mid: str):
    st.subheader("Biologia üß¨: Kom√≥rka ‚Äì co robi mitochondrium?")
    question = "Kt√≥ry element kom√≥rki odpowiada za produkcjƒô energii?"
    options = ["jƒÖdro kom√≥rkowe", "mitochondrium", "b≈Çona kom√≥rkowa", "chloroplast"]
    pick = st.radio(question, options, index=None, key=f"{mid}_pick")

    if st.button(f"Sprawd≈∫ {mid}"):
        ok = (pick == "mitochondrium")
        award(ok, 7, badge="Ma≈Çy Biolog", mid=mid)
        if ok:
            grant_sticker("sticker_bio")
            st.success("‚úÖ Tak! Mitochondrium to ‚Äûelektrownia‚Äù kom√≥rki.")
        else:
            st.warning("To nie to. Podpowied≈∫: ‚Äûelektrownia‚Äù kom√≥rki = mitochondrium.")
    show_hint(mid, "Mitochondria wytwarzajƒÖ ATP ‚Äî paliwo energetyczne kom√≥rki.")

def mission_bio_foodchain(mid: str):
    st.subheader("Biologia üß¨: ≈Åa≈Ñcuch pokarmowy ‚Äì kto jest kim?")
    bank = [
        {"prompt": "Kto jest producentem?", "options": ["trawa", "zajƒÖc", "wilk"], "answer": "trawa"},
        {"prompt": "Kto jest konsumentem I rzƒôdu?", "options": ["zajƒÖc", "trawa", "s≈Ço≈Ñce"], "answer": "zajƒÖc"},
        {"prompt": "Kto jest drapie≈ºnikiem (konsument wy≈ºszego rzƒôdu)?", "options": ["wilk", "trawa", "zajƒÖc"], "answer": "wilk"},
    ]
    key_q = f"{mid}_qidx"
    if key_q not in st.session_state:
        st.session_state[key_q] = random.randrange(len(bank))
    q = bank[st.session_state[key_q]]

    colL, colR = st.columns([3,1])
    with colL:
        pick = st.radio(q["prompt"], q["options"], index=None, key=f"{mid}_pick")
    with colR:
        if st.button("Wylosuj inne pytanie", key=f"{mid}_new"):
            st.session_state[key_q] = random.randrange(len(bank))
            st.rerun()

    if st.button(f"Sprawd≈∫ {mid}", key=f"{mid}_check"):
        ok = (pick == q["answer"])
        award(ok, 8, badge="Ma≈Çy Biolog", mid=mid)
        if ok:
            grant_sticker("sticker_bio")
            st.success("‚úÖ Brawo! Poprawna odpowied≈∫.")
        else:
            st.warning(f"Niestety nie. Poprawna odpowied≈∫: **{q['answer']}**.")
    show_hint(mid, "Producent = ro≈õlina (tworzy pokarm dziƒôki fotosyntezie).")

# -----------------------------
# Sidebar
# -----------------------------
with st.sidebar:
    st.markdown(f"<div class='big-title'>üìö {APP_NAME}</div>", unsafe_allow_html=True)
    st.caption("Misje, daily quest, symulacje, czyszczenie, fabu≈Ça, album, quizy, PRZEDMIOTY ‚ú®")

    page = st.radio(
        "Przejd≈∫ do:",
        options=[
            "Start",
            "Poznaj dane",
            "Plac zabaw",
            "Misje",
            "Przedmioty szkolne",
            "Quiz danych",
            "Quiz obrazkowy",
            "Album naklejek",
            "S≈Çowniczek",
            "Hall of Fame",
            "Panel rodzica",
        ],
    )
    # Prostszy widok dla dzieci (ukrywa JSON-y, pokazuje kafelki)
    st.checkbox("Tryb dzieciƒôcy (prostszy widok)", key="kids_mode")

    with st.expander("S≈Çowniczek (skr√≥t)"):
        for k, v in GLOSSARY.items():
            st.write(f"**{k}** ‚Äî {v}")

# -----------------------------
# START
# -----------------------------
if page == "Start":
    st.markdown(f"<div class='big-title'>üßí {KID_EMOJI} Witaj w {APP_NAME}!</div>", unsafe_allow_html=True)

    colA, colB = st.columns([1, 1])
    with colA:
        st.text_input("Twoje imiƒô (opcjonalnie)", key="kid_name")
        age_in = st.number_input("Ile masz lat?", min_value=7, max_value=14, step=1, value=10)
        st.session_state.age = int(age_in)
        st.session_state.age_group = age_to_group(int(age_in))
        group = st.session_state.age_group
        st.info(f"Twoja grupa wiekowa: **{group}**")

        # Dataset presets by age group
        presets = DATASETS_PRESETS[group]
        preset_name = st.selectbox("Wybierz zestaw danych", list(presets.keys()))
        st.session_state.dataset_name = preset_name
        if st.button("Za≈Çaduj zestaw danych"):
            cols = presets[preset_name]
            n = 100 if group == "7-9" else (140 if group == "10-12" else 180)
            st.session_state.data = make_dataset(n, cols, seed=random.randint(1, 999999))
            st.success(f"Za≈Çadowano: {preset_name}")
            log_event(f"dataset_loaded_{group}_{preset_name}")

        if st.button("Start misji üöÄ"):
            log_event(f"kid_started_{group}")
            st.success("Super! Wejd≈∫ do ¬ªMisje¬´ i dzia≈Çamy.")

    with colB:
        st.write(
            """
            **Co zrobimy?**
            - Daily Quest ‚úÖ
            - Rysowanie, detektyw üïµÔ∏è
            - Symulacje üé≤, Czyszczenie ‚úçÔ∏è, Fabu≈Ça üìñ
            - Przedmioty szkolne üìö (mat, pol, hist, geo, fiz, chem, ang)
            - Album naklejek üóÇÔ∏è i Quizy üñºÔ∏èüß†
            - XP, odznaki i poziomy üîì, Hall of Fame üèÜ
            """
        )
        st.markdown(
            f"XP: **{st.session_state.xp}** | Poziom: **L{current_level(st.session_state.xp)}** "
            + "".join([f"<span class='badge'>üèÖ {b}</span>" for b in st.session_state.badges]),
            unsafe_allow_html=True,
        )

# -----------------------------
# POZNAJ DANE
# -----------------------------
elif page == "Poznaj dane":
    st.markdown(f"<div class='big-title'>üìä {KID_EMOJI} Poznaj dane</div>", unsafe_allow_html=True)
    df = st.session_state.data.copy()

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Liczba wierszy", len(df))
    if "wiek" in df.columns:
        c2.metric("≈ör. wiek", round(df["wiek"].mean(), 1))
    if "wzrost_cm" in df.columns:
        c3.metric("≈ör. wzrost (cm)", round(df["wzrost_cm"].mean(), 1))
    if "miasto" in df.columns:
        c4.metric("Miasta", df["miasto"].nunique())

    with st.expander("Zobacz tabelƒô"):
        st.dataframe(df.head(50))

# -----------------------------
# PLAC ZABAW
# -----------------------------
elif page == "Plac zabaw":
    st.markdown(f"<div class='big-title'>üß™ {KID_EMOJI} Plac zabaw z danymi</div>", unsafe_allow_html=True)
    df = st.session_state.data

    st.write("Wgraj sw√≥j plik CSV **albo** baw siƒô gotowymi danymi.")
    uploaded = st.file_uploader("Wgraj CSV", type=["csv"])
    if uploaded is not None:
        try:
            df_up = pd.read_csv(uploaded)
            st.session_state.data = df_up
            st.success("Plik wgrany! U≈ºywamy Twoich danych.")
            log_event("csv_uploaded")
        except Exception as e:
            st.error(f"B≈ÇƒÖd wczytywania CSV: {e}")

    cols = st.multiselect(
        "Kolumny do podglƒÖdu",
        st.session_state.data.columns.tolist(),
        default=st.session_state.data.columns[:4].tolist(),
    )
    st.dataframe(st.session_state.data[cols].head(30))

# -----------------------------
# MISJE ‚Äî interaktywne zadania
# -----------------------------
elif page == "Misje":
    st.markdown(f"<div class='big-title'>üéØ {KID_EMOJI} Misje</div>", unsafe_allow_html=True)
    df = st.session_state.data
    xp = st.session_state.xp
    lvl = current_level(xp)

    st.info(f"Tw√≥j poziom: **L{lvl}** (progi: 30/60/100 XP) | XP: **{xp}**")

    # Daily Quest (jako funkcja lokalna korzystajƒÖca z df i lvl)
    def render_daily_quest(df: pd.DataFrame, lvl: int):
        today = date.today().isoformat()
        if st.session_state.last_quest != today or st.session_state.todays is None:
            pool = ["DQ_avg_height", "DQ_draw_bar"]
            if lvl >= 2:
                pool += ["DQ_detect"]
            if lvl >= 3:
                pool += ["DQ_sim"]
            st.session_state.todays = random.choice(pool)
            st.session_state.last_quest = today
        dq = st.session_state.todays
        st.subheader("üóìÔ∏è Dzisiejsze wyzwanie")
        if dq == "DQ_avg_height" and "wzrost_cm" in df.columns:
            avg_h = round(float(df["wzrost_cm"].mean()), 1)
            mission_fill_number("DQ-AVG", "≈öredni wzrost (cm) ‚âà", avg_h, tolerance=1.0)
        elif dq == "DQ_draw_bar" and "ulubiony_owoc" in df.columns:
            mission_draw_xy("DQ-BAR", req_x="ulubiony_owoc", req_y="count()", req_type="s≈Çupkowy")
        elif dq == "DQ_detect" and all(c in df.columns for c in ["miasto", "ulubiony_owoc"]):
            mission_detect_city("DQ-DET")
        elif dq == "DQ_sim":
            mission_simulate_coin("DQ-SIM")
        else:
            st.caption("Brakuje potrzebnych kolumn dla dzisiejszego wyzwania ‚Äî zmie≈Ñ preset danych na Start.")

    # RENDER: Daily Quest + zestawy
    render_daily_quest(df, lvl)
    st.divider()

    with st.expander("Zestaw L1 (0+ XP) ‚Äî podstawy rysowania", expanded=(lvl == 1)):
        if "wiek" in df.columns and "wzrost_cm" in df.columns:
            mission_draw_xy("L1-M1", req_x="wiek", req_y="wzrost_cm", req_type="punktowy")
        else:
            st.info("Za≈Çaduj zestaw danych z kolumnami 'wiek' i 'wzrost_cm'.")
        if "ulubiony_owoc" in df.columns:
            mission_draw_xy("L1-M2", req_x="ulubiony_owoc", req_y="count()", req_type="s≈Çupkowy")
            true_cnt = int((df["ulubiony_owoc"] == "banan").sum())
            mission_fill_blank_text("L1-M3", "Na wykresie s≈Çupkowym o≈õ Y pokazuje ___", "liczba os√≥b", ["liczba os√≥b", "kolor", "imiƒô"])
            mission_fill_number("L1-M4", "Ile os√≥b lubi banany?", true_cnt, tolerance=None)
        else:
            st.info("Za≈Çaduj zestaw z kolumnƒÖ 'ulubiony_owoc'.")

    if lvl >= 2:
        with st.expander("Zestaw L2 (30+ XP) ‚Äî rysowanie + detektyw"):
            if "miasto" in df.columns and "wynik_matematyka" in df.columns:
                mission_draw_xy("L2-M1", req_x="miasto", req_y="wynik_matematyka", req_type="s≈Çupkowy")
            else:
                st.info("Potrzebne kolumny: 'miasto', 'wynik_matematyka'.")
            if "miasto" in df.columns and "ulubiony_owoc" in df.columns:
                mission_detect_city("L2-M2")
            else:
                st.info("Potrzebne kolumny: 'miasto' i 'ulubiony_owoc'.")
            mission_order_steps("L2-M3", "U≈Ç√≥≈º kroki analizy danych od poczƒÖtku do ko≈Ñca:", ["Wczytaj dane", "Wybierz kolumny", "Narysuj wykres", "Zapisz wynik"])
            if "wzrost_cm" in df.columns:
                avg_h = round(float(df["wzrost_cm"].mean()), 1)
                mission_fill_number("L2-M4", "≈öredni wzrost (cm) ‚âà", avg_h, tolerance=1.0)

    if lvl >= 3:
        with st.expander("Zestaw L3 (60+ XP) ‚Äî rozbudowane rysowanie, symulacje"):
            if all(c in df.columns for c in ["wiek", "wzrost_cm", "miasto"]):
                mission_draw_xy("L3-M1", req_x="wiek", req_y="wzrost_cm", req_type="punktowy")
            if "ulubione_zwierze" in df.columns:
                mission_draw_xy("L3-M2", req_x="ulubione_zwierze", req_y="count()", req_type="s≈Çupkowy")
            else:
                st.info("Potrzebna kolumna: 'ulubione_zwierze'.")
            mission_spot_the_error("L3-M3", df)
            mission_simulate_coin("L3-M4")

# -----------------------------
# PRZEDMIOTY SZKOLNE ‚Äî NOWA STRONA
# -----------------------------
elif page == "Przedmioty szkolne":
    st.markdown(f"<div class='big-title'>üìö {KID_EMOJI} Przedmioty szkolne</div>", unsafe_allow_html=True)
    st.caption("Zadania tematyczne: matematyka, polski, historia, geografia, fizyka, chemia, angielski. Wszystko na XP i z naklejkami!")

    tab_math, tab_pol, tab_hist, tab_geo, tab_phys, tab_chem, tab_eng, tab_bio = st.tabs(
        ["Matematyka", "Jƒôzyk polski", "Historia", "Geografia", "Fizyka", "Chemia", "Angielski", "Biologia",])

    with tab_math:
        mission_math_arith("MAT-1")
        mission_math_line("MAT-2")

    with tab_pol:
        mission_polish_pos("POL-1")

    with tab_hist:
        mission_history_timeline("HIS-1")

    with tab_geo:
        mission_geo_capitals("GEO-1")

    with tab_phys:
        mission_physics_speed("FIZ-1")

    with tab_chem:
        mission_chem_molar("CHE-1")

    with tab_eng:
        mission_english_irregular("ANG-1")
        
    with tab_bio:
        mission_bio_mito("BIO-1")
        mission_bio_foodchain("BIO-2")

# -----------------------------
# QUIZ (tekstowy)
# -----------------------------
elif page == "Quiz danych":
    st.markdown(f"<div class='big-title'>üß† {KID_EMOJI} Quiz danych</div>", unsafe_allow_html=True)
    group = st.session_state.age_group

    Q = {}
    Q["7-9"] = [
        ("Co to sƒÖ dane?", ["Informacje o rzeczach lub osobach", "Zawsze tylko liczby", "Zagadki bez odpowiedzi"], 0),
        ("Co pokazuje wykres s≈Çupkowy?", ["Ile czego≈õ jest", "Kto wygra mecz", "Kolory tƒôczy"], 0),
        ("Co oznacza ≈õrednia?", ["Suma podzielona przez liczbƒô rzeczy", "Najwiƒôksza warto≈õƒá", "Pierwsza warto≈õƒá"], 0),
    ]
    Q["10-12"] = [
        ("Mediana to‚Ä¶", ["Warto≈õƒá ≈õrodkowa", "Najmniejsza warto≈õƒá", "Suma wszystkiego"], 0),
        ("Punkt na wykresie punktowym to‚Ä¶", ["Para (X,Y)", "Zawsze liczba ca≈Çkowita", "Kolor"], 0),
        ("Co robi grupowanie danych?", ["≈ÅƒÖczy wed≈Çug kategorii", "Usuwa b≈Çƒôdy", "Zwiƒôksza liczbƒô wierszy"], 0),
    ]
    Q["13-14"] = [
        ("Wsp√≥≈Çczynnik korelacji bliski 1 oznacza‚Ä¶", ["SilnƒÖ zale≈ºno≈õƒá dodatniƒÖ", "Brak zale≈ºno≈õci", "SilnƒÖ zale≈ºno≈õƒá ujemnƒÖ"], 0),
        ("Wykres pude≈Çkowy (boxplot) najlepiej pokazuje‚Ä¶", ["Rozk≈Çad i warto≈õci odstajƒÖce", "Kolory kategorii", "Kolejno≈õƒá dat"], 0),
        ("≈örednia wra≈ºliwa jest na‚Ä¶", ["Warto≈õci odstajƒÖce", "Nazwy kolumn", "Kolejno≈õƒá wierszy"], 0),
    ]

    questions = Q.get(group, Q["10-12"])
    answers = []
    for i, (prompt, options, correct_idx) in enumerate(questions, start=1):
        ans = st.radio(f"{i}) {prompt}", options, index=None, key=f"q_{i}")
        answers.append((ans, correct_idx, options))

    if st.button("Sprawd≈∫ odpowiedzi ‚úÖ"):
        score = 0
        for ans, correct_idx, options in answers:
            if ans is not None and ans == options[correct_idx]:
                score += 1
        if score == len(questions):
            st.success("Perfekcyjnie! üèÖ Zdobywasz odznakƒô: M≈Çody Analityk!")
            st.session_state.badges.add("M≈Çody Analityk")
            st.session_state.xp += 10
        elif score >= len(questions) - 1:
            st.info("Bardzo dobrze! Jeszcze chwilka i bƒôdzie z≈Çoto ‚ú®")
            st.session_state.xp += 6
        else:
            st.warning("Damy radƒô! Wr√≥ƒá do 'Poznaj dane' i spr√≥buj ponownie.")
            st.session_state.xp += 2

# -----------------------------
# QUIZ OBRAZKOWY
# -----------------------------
elif page == "Quiz obrazkowy":
    st.markdown(f"<div class='big-title'>üñºÔ∏è {KID_EMOJI} Quiz obrazkowy</div>", unsafe_allow_html=True)

    st.subheader("Pytanie 1 ‚Äî Kt√≥ra kategoria jest najpopularniejsza?")
    df_bar = pd.DataFrame({"owoc": ["jab≈Çko", "banan", "truskawka", "arbuz"], "liczba": [12, 18, 9, 14]})
    chart1 = alt.Chart(df_bar).mark_bar().encode(x="owoc:N", y="liczba:Q")
    st.altair_chart(chart1, use_container_width=True)
    pick1 = st.radio("Wybierz odpowied≈∫:", df_bar["owoc"].tolist(), index=None, key="imgq1")

    st.subheader("Pytanie 2 ‚Äî Jaki jest znak zale≈ºno≈õci?")
    rng = random.Random(123)
    xs = list(range(10))
    ys = [x + rng.randint(-2, 2) for x in xs]
    df_sc = pd.DataFrame({"x": xs, "y": ys})
    chart2 = alt.Chart(df_sc).mark_circle(size=70, opacity=0.8).encode(x="x:Q", y="y:Q")
    st.altair_chart(chart2, use_container_width=True)
    pick2 = st.radio("Wybierz odpowied≈∫:", ["dodatnia", "brak", "ujemna"], index=None, key="imgq2")

    if st.button("Sprawd≈∫ quiz obrazkowy ‚úÖ"):
        ok1 = (pick1 == df_bar.sort_values("liczba", ascending=False)["owoc"].iloc[0]) if pick1 is not None else False
        ok2 = (pick2 == "dodatnia") if pick2 is not None else False
        score = int(ok1) + int(ok2)
        if score == 2:
            st.success("‚úÖ Perfekcyjnie! Dostajesz 8 XP i naklejkƒô 'Oko Soko≈Ça'.")
            st.session_state.xp += 8
            st.session_state.stickers.add("sticker_hawkeye")
        elif score == 1:
            st.info("Prawie! 5 XP za wysi≈Çek.")
            st.session_state.xp += 5
        else:
            st.warning("Spr√≥buj jeszcze raz ‚Äî przyjrzyj siƒô dok≈Çadnie wykresom.")
            st.session_state.xp += 2

# -----------------------------
# ALBUM NAKLEJEK
# -----------------------------
elif page == "Album naklejek":
    st.markdown("# üóÇÔ∏è Album naklejek")
    st.caption("Zbieraj naklejki, wykonujƒÖc misje, quizy i eksperymenty!")

    owned = st.session_state.stickers
    total = len(STICKERS)
    st.write(f"Zebrane: **{len(owned)}/{total}**")

    for code, meta in STICKERS.items():
        owned_flag = code in owned
        css = "" if owned_flag else " locked"
        st.markdown(
            f"<div class='sticker{css}'>"
            f"<span style='font-size:1.6rem'>{meta['emoji']}</span> "
            f"<b>{meta['label']}</b> ‚Äî {meta['desc']}"
            f"</div>",
            unsafe_allow_html=True,
        )

    st.download_button(
        "Pobierz m√≥j album (JSON)",
        data=json.dumps(sorted(list(owned)), ensure_ascii=False, indent=2).encode("utf-8"),
        file_name="album_naklejek.json",
        mime="application/json",
    )

# -----------------------------
# S≈ÅOWNICZEK
# -----------------------------
elif page == "S≈Çowniczek":
    st.markdown("# üìñ S≈Çowniczek pojƒôƒá")
    term = st.text_input("Szukaj pojƒôcia‚Ä¶", "")
    items = {k: v for k, v in GLOSSARY.items() if term.lower() in k.lower()}
    for k, v in items.items():
        st.write(f"**{k}** ‚Äî {v}")
    if not items:
        st.caption("Brak wynik√≥w ‚Äî spr√≥buj innego s≈Çowa.")

# -----------------------------
# HALL OF FAME & profile save
# -----------------------------
elif page == "Hall of Fame":
    st.markdown("# üèÜ Hall of Fame")
    st.write("Dodaj sw√≥j profil do tabeli mistrz√≥w i pobierz zaktualizowany plik JSON.")

    profile = {
        "name": st.session_state.kid_name or "(bez imienia)",
        "age": st.session_state.age,
        "age_group": st.session_state.age_group,
        "xp": st.session_state.xp,
        "level": current_level(st.session_state.xp),
        "badges": sorted(list(st.session_state.badges)),
        "stickers": sorted(list(st.session_state.stickers)),
        "dataset": st.session_state.dataset_name,
        "timestamp": datetime.now(tz=tz.gettz("Europe/Warsaw")).isoformat(),
        "missions_done": sorted([k for k, v in st.session_state.missions_state.items() if v.get("done")]),
    }

    # --- NOWY, przyjazny widok ---
    st.subheader("M√≥j profil")

    c1, c2, c3, c4 = st.columns(4)
    c1.metric("Imiƒô", st.session_state.kid_name or "‚Äî")
    c2.metric("Wiek", st.session_state.age or "‚Äî")
    c3.metric("Poziom", current_level(st.session_state.xp))
    c4.metric("XP", st.session_state.xp)

    st.caption(
        f"Odznaki: **{len(st.session_state.badges)}**  |  Naklejki: **{len(st.session_state.stickers)}**"
    )

    # Plik profilu do pobrania ‚Äì zostaje na wierzchu
    st.download_button(
        "Pobierz m√≥j profil (JSON)",
        data=json.dumps(profile, ensure_ascii=False, indent=2).encode("utf-8"),
        file_name="data4kids_profile.json",
        mime="application/json",
    )

    # JSON techniczny: tylko gdy wy≈ÇƒÖczony tryb dzieciƒôcy
    if not st.session_state.get("kids_mode", True):
        with st.expander("Poka≈º dane techniczne (JSON)"):
            st.json(profile)

    st.divider()
    st.subheader("Tabela Hall of Fame")
    hof_file = st.file_uploader("Wgraj istniejƒÖcy hall_of_fame.json (opcjonalnie)", type=["json"])
    if hof_file is not None:
        try:
            hof_data = json.load(hof_file)
            if isinstance(hof_data, list):
                st.session_state.hall_of_fame = hof_data
                st.success("Wczytano istniejƒÖcy Hall of Fame.")
            else:
                st.warning("Plik powinien zawieraƒá listƒô profili (JSON array).")
        except Exception as e:
            st.error(f"B≈ÇƒÖd wczytywania JSON: {e}")

    if st.button("Dodaj m√≥j profil do Hall of Fame"):
        st.session_state.hall_of_fame.append(profile)
        st.success("Dodano! üéâ")

    if st.session_state.hall_of_fame:
        df_hof = pd.DataFrame(st.session_state.hall_of_fame)
        df_hof = df_hof.sort_values(by=["level", "xp"], ascending=[False, False])
        st.dataframe(df_hof)
        st.download_button(
            "Pobierz zaktualizowany hall_of_fame.json",
            data=json.dumps(st.session_state.hall_of_fame, ensure_ascii=False, indent=2).encode("utf-8"),
            file_name="hall_of_fame.json",
            mime="application/json",
        )
    else:
        st.caption("Brak wpis√≥w ‚Äî dodaj pierwszy profil!")

# -----------------------------
# PANEL RODZICA
# -----------------------------
else:
    st.markdown(f"<div class='big-title'>{PARENT_EMOJI} Panel rodzica</div>", unsafe_allow_html=True)

    if not st.session_state.parent_unlocked:
        st.markdown("Wpisz PIN, by odblokowaƒá ustawienia:")
        pin = st.text_input("PIN (domy≈õlnie 1234)", type="password")
        if st.button("Odblokuj"):
            if hash_text(pin) == st.session_state.pin_hash:
                st.session_state.parent_unlocked = True
                log_event("parent_unlocked")
                st.success("Odblokowano panel rodzica.")
            else:
                st.error("Z≈Çy PIN.")
        st.stop()

    tab1, tab2, tab3 = st.tabs(["Raport", "Dane i prywatno≈õƒá", "Zaawansowane (MVP)"])

    with tab1:
        st.subheader("Raport aktywno≈õci (MVP)")
        overview = {
            "app": APP_NAME,
            "version": VERSION,
            "kid_name": st.session_state.kid_name or "(bez imienia)",
            "age": st.session_state.age,
            "age_group": st.session_state.age_group,
            "timestamp": datetime.now(tz=tz.gettz("Europe/Warsaw")).isoformat(),
            "events": st.session_state.activity_log[-100:],
            "data_shape": list(st.session_state.data.shape),
            "xp": st.session_state.xp,
            "level": current_level(st.session_state.xp),
            "badges": sorted(list(st.session_state.badges)),
            "stickers": sorted(list(st.session_state.stickers)),
            "dataset": st.session_state.dataset_name,
        }
        st.json(overview)
        st.download_button(
            "Pobierz raport JSON",
            data=json.dumps(overview, ensure_ascii=False, indent=2).encode("utf-8"),
            file_name="data4kids_raport.json",
            mime="application/json",
        )

    with tab2:
        st.subheader("Wgraj/usu≈Ñ dane")
        if st.button("Przywr√≥ƒá dane przyk≈Çadowe"):
            group = st.session_state.age_group
            presets = DATASETS_PRESETS[group]
            first_name = list(presets.keys())[0]
            st.session_state.data = make_dataset(120, presets[first_name], seed=random.randint(0, 9999))
            st.success("Przywr√≥cono przyk≈Çadowe dane.")

        st.divider()
        st.subheader("Prywatno≈õƒá (MVP)")
        st.caption("Wersja MVP nie wysy≈Ça nic w internet. Wszystko dzieje siƒô lokalnie w przeglƒÖdarce.")

    with tab3:
        st.subheader("Eksperymentalne")
        new_pin = st.text_input("Ustaw nowy PIN (4 cyfry)", max_chars=4)
        if st.button("Zmie≈Ñ PIN"):
            if new_pin and new_pin.isdigit() and len(new_pin) == 4:
                st.session_state.pin_hash = hash_text(new_pin)
                st.success("PIN zmieniony (dzia≈Ça od razu w tej sesji).")
            else:
                st.error("Podaj dok≈Çadnie 4 cyfry.")

        if st.button("Zablokuj panel"):
            st.session_state.parent_unlocked = False
            st.info("Panel zablokowany.")

# -----------------------------
# Footer
# -----------------------------
st.markdown(
    f"<span class='muted'>v{VERSION} ‚Äî {APP_NAME}. Zrobione z ‚ù§Ô∏è w Streamlit. "
    f"<span class='pill kid'>daily quest</span> <span class='pill kid'>misje</span> <span class='pill kid'>symulacje</span> <span class='pill kid'>czyszczenie</span> <span class='pill kid'>fabu≈Ça</span> <span class='pill kid'>przedmioty</span> <span class='pill kid'>album</span> <span class='pill kid'>quizy</span> <span class='pill parent'>panel rodzica</span></span>",
    unsafe_allow_html=True,
)
